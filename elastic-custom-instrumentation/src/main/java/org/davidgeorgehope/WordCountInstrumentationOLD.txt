package org.davidgeorgehope;

/*
 * Copyright The OpenTelemetry Authors
 * SPDX-License-Identifier: Apache-2.0
 */


import co.elastic.apm.agent.sdk.ElasticApmInstrumentation;
import co.elastic.apm.api.ElasticApm;
import co.elastic.apm.api.Transaction;
import net.bytebuddy.asm.Advice;
import net.bytebuddy.description.method.MethodDescription;
import net.bytebuddy.description.type.TypeDescription;
import net.bytebuddy.matcher.ElementMatcher;

import java.util.Collection;
import java.util.Collections;
import java.util.logging.Logger;

import static net.bytebuddy.matcher.ElementMatchers.named;

public class WordCountInstrumentationOLD  {
    private static Logger logger = Logger.getLogger(WordCountInstrumentationOLD.class.getName());

    @Override
    public ElementMatcher<? super TypeDescription> getTypeMatcher() {
        return named("CDSSDCSC");
    }


    @Override
    public ElementMatcher<? super MethodDescription> getMethodMatcher() {
        return named("CDSCSDCSDS");
    }

    @Override
    public Collection<String> getInstrumentationGroupNames() {
        return Collections.singletonList("elastic-plugin-example");
    }


    @SuppressWarnings("unused")
    public static class AdviceClass {
        @Advice.OnMethodEnter(suppress = Throwable.class)
        public static Transaction onEnter(@Advice.Argument(value = 0) String input) {
            Transaction transaction = ElasticApm.startTransaction();
            try {
                transaction.setName("MyController#myAction");
                transaction.setType(Transaction.TYPE_REQUEST);
                // do your thing...
            } catch (Exception e) {
                transaction.captureException(e);
                throw e;
            }

            // Now the span is started and active.
            return transaction; // returning the scope to close it in the exit advice
        }

        @Advice.OnMethodExit(onThrowable = Throwable.class, suppress = Throwable.class)
        public static void onExit(@Advice.Return(readOnly = false) int wordCount,
                                  @Advice.Thrown Throwable throwable,
                                  @Advice.Enter Transaction transaction) {
            transaction.setLabel("wordCount",wordCount);
            transaction.end();
        }
    }
}